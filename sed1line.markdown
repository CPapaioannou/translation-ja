# SED (UNIX stream editor) による便利な 1 行スクリプト

## この文書について

  * 編集: Eric Pement - pemente[at]northpark[dot]edu
  * バージョン: 5.5 (2005-12-29)
  * 日本語訳: 佐藤 文優
    + <https://github.com/fumiyas>
    + <https://twitter.com/satoh_fumiyasu>
  * 日本語バージョン: 2012-07-25

このファイルの最新版は下記の URL で入手できます:

  * <https://github.com/fumiyas/translation-ja/blob/master/sed1line.txt>

このファイルの原書 (英語) の最新版は下記の URL で入手できます:

  * <http://sed.sourceforge.net/sed1line.txt>
  * <http://www.pement.org/sed/sed1line.txt>

このファイルのほかの言語版は下記の URL で入手できます:

  * 中国語       - <http://sed.sourceforge.net/sed1line_zh-CN.html>
  * チェコ語     - <http://sed.sourceforge.net/sed1line_cz.html>
  * オランダ語   - <http://sed.sourceforge.net/sed1line_nl.html>
  * フランス語   - <http://sed.sourceforge.net/sed1line_fr.html>
  * ドイツ語     - <http://sed.sourceforge.net/sed1line_de.html>
  * イタリア語   - (保留中)
  * ポルトガル語 - <http://sed.sourceforge.net/sed1line_pt-BR.html>
  * スペイン語   - (保留中)

## 行間の調整

    # 各行の下に空行を挿入
    sed G

    # すでに空行が挿入されている行を含む入力に空行を挿入
    # 出力の各テキスト行間の空行は 1 行になる。
    sed '/^$/d;G'

    # 各行の下に空行 2 つを挿入
    sed 'G;G'

    # 挿入した空行を削除 (空行は偶数番目の行に現れることを前提としている)
    sed 'n;d'

    # 正規表現「regexp」に一致するすべての行の上に空行を挿入
    sed '/regex/{x;p;x;}'

    # 正規表現「regexp」に一致するすべての行の下に空行を挿入
    sed '/regex/G'

    # 正規表現「regexp」に一致するすべての行の上下に空行を挿入
    sed '/regex/{x;p;x;G;}'

## 番号付け

    # ファイルの各行に行番号 (左寄せ) を付ける。スペースの代わりに
    # タブを利用して左マージンを維持している。(本文書最後の
    # 「\t」に関する注意を参照のこと)
    sed = filename | sed 'N;s/\n/\t/'

    # ファイルの各行に行番号 (右寄せ) を付ける
    sed = filename | sed 'N; s/^/     /; s/ *\(.\{6,\}\)\n/\1  /'

    # ファイルの各行に行番号を付ける。ただし空行には付けない
    sed '/./=' filename | sed '/./N; s/\n/ /'

    # 行数を数える (「wc -l」の模倣)
    sed -n '$='

## テキストの変換と置換

    # UNIX 環境: DOS 形式の改行 (CR/LF) を UNIX 形式 (LF) に変換
    sed 's/.$//'       # すべての行の終端が CR/LF になっていることが前提
    sed 's/^M$//'      # bash/zsh/tcsh では「^M」を Ctrl-V, Ctrl-M で入力
    sed 's/\x0D$//'    # ssed または GNU sed 3.02.80 以降で動作

    # UNIX 環境: UNIX 形式の改行 (LF) を DOS 形式 (CR/LF) に変換
    sed "s/$/`echo -e \\\r`/"            # ksh のコマンドライン下の場合
    sed 's/$'"/`echo \\\r`/"             # bash のコマンドライン下の場合
    sed "s/$/`echo \\\r`/"               # zsh のコマンドライン下の場合
    sed 's/$/\r/'                        # GNU sed 3.02.80 以降

    # DOS 環境: UNIX 形式の改行 (LF) を DOS 形式 (CR/LF) に変換
    sed "s/$//"                          # 手法 1
    sed -n p                             # 手法 2

    # DOS 環境: DOS 形式の改行 (CR/LF) を UNIX 形式 (LF) に変換
    # UnixUtils 付属の sed バージョン 4.0.7 以降でのみ動作する。
    # UnixUtils 付属の sed は特殊な「--text」オプションを持っていか
    # どうかで識別でき、「--help」オプションを利用して確認できる。
    # ほかの sed では、DOS の改行を UNIX の改行に変換することは
    # 不可能。代わりに tr コマンドを利用する。
    sed "s/\r//" infile >outfile         # UnxUtils sed 4.0.7 以降
    tr -d \r <infile >outfile            # GNU tr 1.22 以降

    # 各行の行頭の空白文字 (スペース、タブ) を削除
    # すべてのテキストが左に揃う
    sed 's/^[ \t]*//'                    # 本文書最後の「\t」の注意参照

    # 各行の行末の空白文字 (スペース、タブ) を削除
    sed 's/[ \t]*$//'                    # 本文書最後の「\t」の注意参照

    # 各行の行頭と行末の空白文字 (スペース、タブ) を削除
    sed 's/^[ \t]*//;s/[ \t]*$//'

    # 各行の行頭にスペースを 5 つ挿入 (ページオフセットを作る)
    sed 's/^/     /'

    # すべてのテキストを幅 79 カラムで右揃え
    # 訳注: 日本語などのマルチバイト文字は非対応
    sed -e :a -e 's/^.\{1,78\}$/ &/;ta'  # set at 78 plus 1 space

    # すべてのテキストを幅 79 カラムで中央揃え
    # 手法 1 は、入力の行頭のスペースが残り、行末にスペースが追加される。
    # 手法 2 は、入力の行頭のスペースが削除され、行末にスペースは追加
    # されない。
    sed  -e :a -e 's/^.\{1,77\}$/ & /;ta'                     # 手法 1
    sed  -e :a -e 's/^.\{1,77\}$/ &/;ta' -e 's/\( *\)\1/\1/'  # 手法 2

    # 各行の「foo」を「bar」で置換
    sed 's/foo/bar/'             # 各行中の最初に一致したものを置換
    sed 's/foo/bar/4'            # 各行中の 4 番目に一致したものを置換
    sed 's/foo/bar/g'            # 各行中のすべてを置換
    sed 's/\(.*\)foo\(.*foo\)/\1bar\2/' # 最後の前のものだけを置換
    sed 's/\(.*\)foo/\1bar/'            # 最後のものだけを置換

    # 「baz」を含む各行の「foo」を「bar」に置換
    sed '/baz/s/foo/bar/g'

    # 「baz」を含まない各行の「foo」を「bar」に置換
    sed '/baz/!s/foo/bar/g'

    # 「scarlet」、「ruby」、「puce」を「red」に変更
    sed 's/scarlet/red/g;s/ruby/red/g;s/puce/red/g'   # ほとんどの sed
    gsed 's/scarlet\|ruby\|puce/red/g'                # GNU sed のみ

    # 行の順番を逆にする (「tac」の模倣)
    # HHsed v1.5 ではバグ/仕様により空白行が削除される
    sed '1!G;h;$!d'               # 手法 1
    sed -n '1!G;h;$p'             # 手法 2

    # 行の文字の順番を逆にする (「rev」の模倣)
    sed '/\n/!G;s/\(.\)\(.*\n\)/&\2\1/;//D;s/.//'

    # 2 行ずつ結合して並べる (「paste」と似た動作)
    sed '$!N;s/\n/ /'

    # 行末がバックスラッシュ「\」の場合に次の行を結合
    sed -e :a -e '/\\$/N; s/\\\n//; ta'

    # 行頭がイコール記号「=」場合に前の行に結合して「=」をスペースに置換
    sed -e :a -e '$!N;s/\n=/ /;ta' -e 'P;D'

    # 数字の文字列にカンマ「,」を追加 (「1234567」を「1,234,567」に変換)
    gsed ':a;s/\B[0-9]\{3\}\>/,&/;ta'                     # GNU sed
    sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta'  # ほかの sed

    # 小数点「.」とマイナス記号「-」を含む数字列にカンマ「,」を追加 (GNU sed)
    gsed -r ':a;s/(^|[^0-9.])([0-9]+)([0-9]{3})/\1\2,\3/g;ta'

    # 5 行ごとに空白行を追加
    gsed '0~5G'                  # GNU sed のみ
    sed 'n;n;n;n;G;'             # ほかの sed

## 一定の行を選択して表示

    # 最初の 10 行を表示 (「head」の模倣)
    sed 10q

    # 最初の 1 行を表示 (「head -n 1」の模倣)
    sed q

    # 最後の 10 行を表示 (「tail」の模倣)
    sed -e :a -e '$q;N;11,$D;ba'

    # 最後の 2 行を表示 (「tail -n 2」の模倣)
    sed '$!N;$!D'

    # 最後の 1 行を表示 (「tail -n 1」の模倣)
    sed '$!d'                    # 手法 1
    sed -n '$p'                  # 手法 2

    # 最後の行の前の行を表示
    sed -e '$!{h;d;}' -e x              # 入力が 1 行の場合は空白行を表示
    sed -e '1{$q;}' -e '$!{h;d;}' -e x  # 入力が 1 行の場合は最終行を表示
    sed -e '1{$d;}' -e '$!{h;d;}' -e x  # 入力が 1 行の場合は何も表示しない

    # 正規表現に一致する行だけを表示 (「grep」の模倣)
    sed -n '/regexp/p'           # 手法 1
    sed '/regexp/!d'             # 手法 2

    # 正規表現に一致しない行だけを表示 (「grep -v」の模倣)
    sed -n '/regexp/!p'          # 手法 1, 上の例の逆に相当
    sed '/regexp/d'              # 手法 2, より単純な書き方

    # 正規表現に一致する行の直前の行を表示する、ただし
    # 正規表現に一致する行は表示しない
    sed -n '/regexp/{g;1!p;};h'

    # 正規表現に一致する行の直後の行を表示する、ただし
    # 正規表現に一致する行は表示しない
    sed -n '/regexp/{n;p;}'

    # 正規表現に一致する行とその前後の 1 行を行番号付きで表示する
    # (「grep -A1 -B1」の模倣)
    sed -n -e '/regexp/{=;x;1!p;g;$!N;p;D;}' -e h

    # 「AAA」、「BBB」、「CCC」すべてを含む行を表示 (順番は問わない)
    sed '/AAA/!d; /BBB/!d; /CCC/!d'

    # 「AAA」、「BBB」、「CCC」すべてを含む行を表示 (指定の順番で現われる場合)
    sed '/AAA.*BBB.*CCC/!d'

    # 「AAA」、「BBB」、「CCC」いずれかを含む行を表示 (「egrep」の模倣)
    sed -e '/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d    # ほとんどの sed
    gsed '/AAA\|BBB\|CCC/!d'                        # GNU sed のみ

    # 「AAA」を含む段落を表示 (段落は空行で区切られていることを前提)
    # HHsed v1.5 の場合、以下の 3 つのスクリプト中の「x;」の後に
    # 「G;」を追加する必要あり
    sed -e '/./{H;$!d;}' -e 'x;/AAA/!d;'

    # 「AAA」、「BBB」、「CCC」すべてを含む段落を表示 (順番は問わない)
    sed -e '/./{H;$!d;}' -e 'x;/AAA/!d;/BBB/!d;/CCC/!d'

    # 「AAA」、「BBB」、「CCC」いずれかを含む段落を表示
    sed -e '/./{H;$!d;}' -e 'x;/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d
    gsed '/./{H;$!d;};x;/AAA\|BBB\|CCC/b;d'         # GNU sed のみ

    # 65 文字以上の行だけを表示
    sed -n '/^.\{65\}/p'

    # 65 文字未満の行だけを表示
    sed -n '/^.\{65\}/!p'        # 手法 1, 上の例の逆に相当
    sed '/^.\{65\}/d'            # 手法 2, より単純な書き方

    # 正規表現に一致する最初の行から入力の最後までを表示
    sed -n '/regexp/,$p'

    # 行番号を指定して表示 (8 〜 12 行目の場合)
    sed -n '8,12p'               # 手法 1
    sed '8,12!d'                 # 手法 2

    # 52 行目を表示
    sed -n '52p'                 # 手法 1
    sed '52!d'                   # 手法 2
    sed '52q;d'                  # 手法 3, 巨大なファイルで効率的

    # 3 行目以降の 1 行を 6 行おきに表示
    gsed -n '3~7p'               # GNU sed のみ
    sed -n '3,${p;n;n;n;n;n;n;}' # ほかの sed

    # 2 つの正規表現に一致する行間の行を表示 (一致する行も含む)
    sed -n '/Iowa/,/Montana/p'             # 大文字・小文字は区別される

## 一定の行を選択して削除

    # 2 つの正規表現に一致する行間を除外して表示
    sed '/Iowa/,/Montana/d'

    # 連続する重複行を削除 (「uniq」の模倣)
    # 重複行は最初の行だけ表示し、残りは削除する
    sed '$!N; /^\(.*\)\n\1$/!P; D'

    # 連続しない重複行を削除
    # 注意: 行データを保持するためのバッファーサイズが不足しないように
    # する、もしくは GNU sed を使用すること
    sed -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P'

    # 重複する行以外を削除 (「uniq -d」の模倣)
    sed '$!N; s/^\(.*\)\n\1$/\1/; t; D'

    # 最初の 10 行を削除
    sed '1,10d'

    # 最後の 1 行を削除
    sed '$d'

    # 最後の 2 行を削除
    sed 'N;$!P;$!D;$d'

    # 最後の 10 行を削除
    sed -e :a -e '$d;N;2,10ba' -e 'P;D'   # 手法 1
    sed -n -e :a -e '1,10!{P;N;D;};N;ba'  # 手法 2

    # 8 番目の行ごとに削除
    gsed '0~8d'                           # GNU sed のみ
    sed 'n;n;n;n;n;n;n;d;'                # ほかの sed

    # 正規表現に一致する行を削除
    sed '/pattern/d'

    # すべての空行を削除 (「grep .」と同様)
    sed '/^$/d'                           # 手法 1
    sed '/./!d'                           # 手法 2

    # 連続する空行を最初の空行を除き削除 (1 つの空行にまとめる)
    # また、入力の最初と最後の空行を削除する (「cat -s」の模倣)
    # 訳注: 手法 2 に続く文は原文は「allows 1 blank at top, 0 at EOF」だが、
    #       手元の GNU sed 4.2.1 で試した限りでは訳文のようになった。
    sed '/./,/^$/!d'      # 手法 1, 最初に現われる空行は削除され、最後のは 1 行残る
    sed '/^$/N;/\n$/D'    # 手法 2, 最初と最後に現われる空行は 1 行残る

    # 連続する空行を最初の空行 2 つを除き削除 (2 つの空行にまとめる)
    sed '/^$/N;/\n$/N;//D'

    # 入力の最初に現われる空行をすべて削除
    sed '/./,$!d'

    # 入力の最後に現われる空行をすべて削除
    sed -e :a -e '/^\n*$/{$d;N;ba' -e '}'  # works on all seds
    sed -e :a -e '/^\n*$/N;/\n$/ba'        # ditto, except for gsed 3.02.*

    # 各段落の最後の 1 行を削除
    sed -n '/^$/{p;h;};/./{x;/./p;}'

## 特殊な応用

    # man ページから nroff の重ね打ち (任意の文字とバックスペース) を削除
    # 「echo」コマンドは、UNIX System V か bash の場合は -e オプションが必要
    sed "s/.`echo \\\b`//g"    # UNIX 環境ではダブルクォート「"」が必要
    sed 's/.^H//g'             # bash/zsh/tcsh では「^H」を Ctrl-V, Ctrl-H で入力
    sed 's/.\x08//g'           # 16 進数表現 (sed 1.5, GNU sed, ssed)

    # Usenet や e-mail メッセージのヘッダー部を取得
    sed '/^$/q'                # 最初の空行以降を削除

    # Usenet や e-mail メッセージのボディ部を取得
    sed '1,/^$/d'              # 最初の行から最初の空行までを削除

    # Subject ヘッダーを取得、ただし行頭の「Subject: 」は削除
    # 訳注: Subject ヘッダーが複数行の場合には対応していない
    # 訳注: ヘッダーのフィールド名は大文字・小文字を区別しない仕様だが
    #       それを考慮していない
    sed '/^Subject: */!d; s///;q'

    # Reply-To ヘッダーを取得、なければ From ヘッダーを取得
    # 訳注: ヘッダーのフィールド名は大文字・小文字を区別しない仕様だが
    #       それを考慮していない
    sed '/^Reply-To:/q; /^From:/h; /./d;g;q'

    # アドレスを適切に抜き出す
    # アドレスヘッダー 1 行 (上記スクリプトを参照) から e-mail アドレスを取得
    # 訳注: RFC 822 (とその更新版である RFC 5322 など) で規定される
    #       ヘッダー中のアドレスの構文は複雑であり、このスクリプトでは
    #       特定の形式しか対応できない
    sed 's/ *(.*)//; s/>.*//; s/.*[:<] *//'

    # 各行の行頭に山括弧「>」とスペースを追加 (メッセージの引用)
    sed 's/^/> /'

    # 各行の行頭の山括弧「>」とスペースを削除 (メッセージの引用を解除)
    sed 's/^> //'

    # HTML のタグを削除 (複数行のタグも対応)
    sed -e :a -e 's/<[^>]*>//g;/</N;//ba'

    # 複数のファイルに分かれた uuencode されたバイナリーデータを展開
    # 無関係なヘッダー情報を削除して uuencode データだけを抽出している。
    # sed に渡すファイルは適切な順番にする必要がある。
    # 手法 1 はコマンドラインで利用可能。
    # 手法 2 は UNIX のシェルスクリプト内に記述し、スクリプトの
    # コマンドライン引数でファイルを指定する。
    sed '/^end/,/^begin/d' file1 file2 ... fileX | uudecode   # 手法 1
    sed '/^end/,/^begin/d' "$@" | uudecode                    # 手法 2

    # 段落をアルファベット順にソート (段落は空行で区切られていることを前提)
    # GNU sed 版は垂直タブ「\v」を一時的な区切文字として利用しているが、
    # 入力中に現われない一意な文字であれば、ほかの文字でも動作する。
    sed '/./{H;d;};x;s/\n/={NL}=/g' file | sort | sed '1s/={NL}=//;s/={NL}=/\n/g'
    gsed '/./{H;d};x;y/\n/\v/' file | sort | sed '1s/\v//;y/\v/\n/'

    # 各 *.TXT ファイルを個別に ZIP ファイル化
    # ZIP ファイル名は元の *.TXT ファイルのベース名を元に設定され、
    # ZIP ファイル作成後は pkzip の -m オプションにより元の *.TXT
    # ファイルは削除される。
    # (DOS では「dir /b」でファイル名が大文字化して表示される)
    echo @echo off >zipup.bat
    dir /b *.txt | sed "s/^\(.*\)\.TXT/pkzip -mo \1 \1.TXT/" >>zipup.bat

## 典型的な使用方法

sed は 1 つ以上の編集コマンドを受け取り、それらを順番に、
入力の各行に 適用する。最初の入力行に対してすべてのコマンドを
適用した後、その行を出力し、次の行を受け取り、同じサイクルを
繰り返す。先の例の多くは、入力は標準入力デバイス (つまりコンソール)
を前提としている (通常はパイプで入力する)。標準入力から入力
しない場合は、1 つ以上のファイルをコマンドラインに指定できる。
出力は標準出力 (画面) に送られる。よって、使い方は次のようになる:

    cat filename | sed '10q'        # パイプで入力を得る
    sed '10q' filename              # 同上。無駄な「cat」を省く
    sed '10q' filename > newfile    # 出力をファイルに向ける

これ以外の構文の解説 (コマンドラインでなくファイルから編集コマンドを
得る方法など) については、下記の文献を参照のこと:

  * sed & awk, 2nd Edition
    + Dale Dougherty, Arnold Robbins 著
    + O'Reilly, 1997
    + <http://shop.oreilly.com/product/9781565922259.do>
  * UNIX Text Processing
    + Dale Dougherty, and Tim O'Reilly 著
    + Hayden Books, 1987
    + <http://oreilly.com/openbook/utp/>
  * U-SEDIT2.ZIP に含まれているチュートリアル
    + Mike Arst 著
    + 多くのサイトで配布されている

sed の能力を存分に発揮するには「正規表現」の理解が不可欠である。
下記の文献を参照のこと:

  * Mastering Regular Expressions
    + Jeffrey Friedl 著
    + O'Reilly, 1997
    + <http://shop.oreilly.com/product/9780596528126.do>
  * UNIX システムの各種オンラインマニュアル (man pages)
    + `man sed`、`man regexp` を実行してほしい。
      `man ed` 中の正規表現の章も参考になる。
    + だたし、オンラインマニュアルは一般的に難解である。sed と
      正規表現を初めて学ぶユーザーには向いていないが、
      使い慣れているユーザーにとっては参考となる。

## クォートの構文

これまで紹介した例の多くは、編集コマンドをダブルクォート
(`"..."`) ではなくシングルクォート (`'...'`) で括っている。
一般的に sed は UNIX 環境で利用するためである。
シングルクォートは、UNIX シェルがドル記号 `$` やバッククォート
`` ` ``...`` ` `` を解釈するのを防ぐ (ダブルクォート中ではシェルにより
展開されてしまう)。csh や csh 派生のシェルを使用している
ユーザーは、上記の例が適切に動作させるには、感嘆記号 `!` を
バックスラッシュ `\` でエスケープする (つまり `\!` とする)
必要がある (シングルクォートで括られている場合も含む)。
DOS 用の sed では、編集コマンドはシングルクォートではなく
ダブルクォートで括る必要がある。

## sed スクリプトでの `\t` の使用

この文書ではスクリプト中のタブ文字 (0x09) を明確に表すために
`\t` という表現を用いた。しかし、ほとんどのバージョンの sed
は `\t` 記法を解釈しない。よって、コマンドラインでスクリプトを
入力するときは、`\t` の 代わりにタブキーを押さなければならない。
`\t` を正規表現のメタ文字として解釈するのは、awk, perl, HHsed,
sedmod そして GNU sed 3.02.80 である。

## sed のバージョン

sed はバージョンにより動作が異なり、わずかであるが、いくつか構文の
違いが存在する。特に、編集コマンドにおいて、ラベルの使用 (`:name`)、
コマンドの最後以外での分岐命令 (`b`, `t`) の使用がサポートされていない
ものがある。上で紹介した例では、ほとんどの sed で問題ない構文を
用いたが、GNU 版の sed ではより簡潔な構文で書ける。例えば、
次のような長いコマンドがあるとする:

    sed -e '/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d

GNU sed では次のように短かく書ける:

    sed '/AAA/b;/BBB/b;/CCC/b;d'      # もしくは
    sed '/AAA\|BBB\|CCC/b;d'          # と書ける

ほかには、多くの sed バージョンが `/one/ s/RE1/RE2/` のような
コマンドを受け入れるが、いくつかの sed は `/one/! s/RE1/RE2/` を
受け入れないことを覚えておいて欲しい。`s` の前のスペースが問題
であるため、そのようなコマンドを入力する場合は `s` の前の
スペースを取り除くこと。

## 速度の最適化

実行速度を上げる必要がある場合 (入力が巨大、CPU やハードディスクが遅いなど)、
「find」表現を `s/.../.../` 命令の前に指定することで、
置換の実行速度を向上できる。例:

    sed 's/foo/bar/g' filename         # 通常の置換コマンド
    sed '/foo/ s/foo/bar/g' filename   # より速く実行
    sed '/foo/ s//bar/g' filename      # より短かい記法

行の取捨選択において、入力の最初の部分が処理対象の場合は、
スクリプトに終了コマンド `q` を指定することで巨大ファイルの
処理時間を劇的に短縮できる。例:

    sed -n '45,50p' filename           # ファイルの 45 〜 50 行目を表示
    sed -n '51q;45,50p' filename       # 同上。しかし、より速く実行

## 貢献

あなたが考えたスクリプトを寄稿したり、この文書の間違いを発見した
場合は、著者に e-mail を送って知らせてほしい。その際は、あなたが
利用した sed のバージョンと OS、問題の内容を示してください。
ワンライナー (1 行スクリプト) になるように、コマンドラインは 65 文字
以内で記述するように。

本ファイルで紹介したスクリプトの提供者:

  * Al Aab
    + 「seders」メーリングリスト設立者
  * Edgar Allen
    + そのほか
  * Yiorgos Adamopoulos
    + そのほか
  * Dale Dougherty
    + 「sed & awk」の著者
  * Carlos Duarte
    + 「do it with sed」の著者
  * Eric Pement
    + この文書の著者
  * Ken Pizzini
    + GNU sed 3.02 の作者
  * S.G. Ravenhall
    + 素晴しい HTML タグ除去スクリプト
  * Greg Ubben
    + 多くの寄稿と手助け

